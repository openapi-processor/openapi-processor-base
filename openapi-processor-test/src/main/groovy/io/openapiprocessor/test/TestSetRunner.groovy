/*
 * Copyright 2020 https://github.com/openapi-processor/openapi-processor-base
 * PDX-License-Identifier: Apache-2.0
 */

package io.openapiprocessor.test

import java.nio.file.Path

/**
 * used to execute test sets.
 *
 * "expected" represents the files from the "outputs" folder of the test case
 * "generated" represents the files generated by the processor
 */
class TestSetRunner {
    Test test
    TestSet testSet

    TestSetRunner(Test test, TestSet testSet) {
        this.test = test
        this.testSet = testSet
    }

    /**
     * runs a test-set
     *
     * @return true on success, false on failure, i.e. if there were any differences
     */
    boolean run () {
        test.init()

        def mapping = test.mapping
        def options = [
            parser: test.parser,
            apiPath: test.apiPath.toString(),
            targetDir: test.targetDir.toString(),
            mapping: mapping.yaml
        ]

        when:
        testSet.processor.run (options)

        then:
        def expectedFiles = test.getExpectedFilePaths()
        def generatedFiles = getGeneratedFilePaths(expectedFiles)

        // check expected file names match generated file names
        assert expectedFiles.keySet() == generatedFiles.keySet()

        // compare expected files with the generated files
        def success = true
        expectedFiles.each {k, v ->
            def equalContent = !test.printUnifiedDiff (v, generatedFiles.get(k))
            success &= equalContent
        }

        success
    }

    // relative key => absolute path (to target folder)
    private Map<String, Path> getGeneratedFilePaths(Map<String, Path> expectedFiles) {
        return getGeneratedFiles(expectedFiles)
    }

    private Map<String, Path> getGeneratedFiles(Map<String, Path> expectedFiles) {
        def generatedFilesAll = test.generatedSourceFiles
        generatedFilesAll.addAll(test.generatedResourceFiles)

        def generatedFiles = filterUnexpectedFiles(
                expectedFiles,
                generatedFilesAll, [
                    "${test.packagePath}/support/Generated.java".toString(),
                    "${test.packagePath}/validation/Values.java".toString(),
                    "${test.packagePath}/validation/ValueValidator.java".toString()
                ] as Set<String>)

        return generatedFiles
    }

    private static Map<String, Path> filterUnexpectedFiles(
            Map<String, Path> expectedFiles,
            Set<String> generatedFiles,
            Set<String> unexpectedFiles
    ) {
        def generated = new TreeMap<String, Path>()
        generatedFiles.each {
            if (!expectedFiles.containsKey(it) && unexpectedFiles.find { u -> it.endsWith(u) } != null) {
                return
            }

            def value = expectedFiles.get(it)
            generated.put(it, value)
        }
        return generated
    }
}
