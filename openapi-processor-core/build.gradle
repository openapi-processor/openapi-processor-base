plugins {
    id("openapiprocessor.library")
    id("openapiprocessor.publish")
    id("openapiprocessor.test")
    id("openapiprocessor.testInt")
    id("openapiprocessor.version")

    id 'antlr'
    id 'groovy'
    alias(libs.plugins.sonar)
}

repositories {
//    mavenLocal()
}

sourceSets {
    main {
        java {
            srcDirs 'build/antlr'
        }
    }
}

tasks.named('generateGrammarSource') {
    def antlrPkg = 'io.openapiprocessor.core.processor.mapping.v2.parser.antlr'
    arguments += ['-package', antlrPkg]
    outputDirectory = layout.buildDirectory.dir("antlr/${antlrPkg.replace('.', '/')}").get().asFile
}

tasks.named('compileTestGroovy') {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDirectory)
    classpath += files(compileTestKotlin.destinationDirectory)
}


tasks.named('compileKotlin') {
    dependsOn 'generateGrammarSource'
}

tasks.named('compileTestKotlin') {
    dependsOn 'generateTestGrammarSource'
}

tasks.named('compileTestIntKotlin') {
    dependsOn 'generateTestIntGrammarSource'
}

tasks.named('sourcesJar') {
    dependsOn 'generateGrammarSource'
}

tasks.named('kotlinSourcesJar') {
    dependsOn 'generateGrammarSource'
}

dependencies {
    antlr (libs.antlr)

    compileOnly (libs.openapi.processor.api)
    compileOnly (libs.logback)

    implementation (project(":openapi-processor-core-parser-api"))
    implementation (platform(libs.openapi.parser.bom))
    implementation (libs.openapi.parser.parser)
    implementation (libs.io.jackson)

    implementation (platform(libs.jackson.bom))
    implementation (libs.jackson.kotlin)
    implementation (libs.jackson.yaml)
    implementation (libs.uritemplate)
    implementation (libs.commons.text)
    implementation (libs.commonmark)
    implementation (libs.format.java.google)
    implementation (libs.slf4j)

    testImplementation (project(":openapi-processor-core-parser-api"))
    testImplementation (project(":openapi-processor-core-parser-swagger"))
    testImplementation (project(":openapi-processor-core-parser-openapi4j"))
    testImplementation (testFixtures(project(":openapi-processor-core-parser-swagger")))
    testImplementation (testFixtures(project(":openapi-processor-core-parser-openapi4j")))
    testImplementation (project(":openapi-processor-test"))
    testImplementation (libs.openapi.processor.api)
    testImplementation (platform(libs.groovy.bom))
    testImplementation (platform(libs.kotest.bom))
    testImplementation (libs.kotest.runner)
    testImplementation (libs.kotest.datatest)
    testImplementation (libs.mockk)
    testImplementation (libs.spock)
    testImplementation (libs.logback)
    testImplementation (libs.jimfs)

    testIntImplementation (project(":openapi-processor-core-parser-api"))
    testIntImplementation (project(":openapi-processor-core-parser-swagger"))
    testIntImplementation (project(":openapi-processor-core-parser-openapi4j"))
    testIntImplementation (testFixtures(project(":openapi-processor-core-parser-swagger")))
    testIntImplementation (testFixtures(project(":openapi-processor-core-parser-openapi4j")))
    testIntImplementation (project(":openapi-processor-test"))
    testIntImplementation (libs.openapi.processor.api)
    testIntImplementation (platform(libs.groovy.bom))
    testIntImplementation (platform(libs.kotest.bom))
    testIntImplementation (libs.kotest.runner)
    testIntImplementation (libs.kotest.datatest)
    testIntImplementation (libs.mockk)
    testIntImplementation (libs.spock)
    testIntImplementation (libs.logback)
    testIntImplementation (libs.jimfs)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        String v = it.candidate.version
        println "candidate ${it.candidate}:$v"
        return v.endsWith ("-SNAPSHOT") || v.endsWith ("-M1") || v.contains ("alpha")
    }
}

jacocoTestReport {
    dependsOn(testInt)
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}

sonarqube {
  properties {
    property "sonar.projectKey", "openapi-processor_openapi-processor-base-core"
    property "sonar.organization", "openapi-processor"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.dir("reports/jacoco/test/jacocoTestReport.xml").get().toString()
  }
}

generateVersion {
    targetPackage = "io.openapiprocessor.core"
}

publishing {
    publications {
        named/*<MavenPublication>*/("openapiprocessor") {
            pom {
                description.set("OpenAPI Processor Core")
            }
        }
    }
}
